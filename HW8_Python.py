# -*- coding: utf-8 -*-
"""HW8_Congdon_Andrew.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OcMCL4AkorPfGLN89w6lwxEWy0VHQWev

HW #8<p>Andrew Congdon<p>4/15/2023

Problem 1:<p>This program creates a "Mad Libs" story by asking the user to input multiple different words (superlative adjective, plural noun, etc.).
"""

# Let user know what game they are playing in the first place
print('Welcome to the engineering Mad Libs story!')

# Space for clarity
print(' ')

# Ask user to input a superlative adjective
supAdj = input('Please input a superlative adjective: ')
# Ask user to input a plural noun
pNoun = input('Please input a plural noun: ')
# Ask user to input any random noun
rNoun = input('Please input any random noun: ')
# Ask user to input an adjective
adj = input('Please input an adjective: ')
# Ask user to input an EG10118 instructor's name
egInst = input('Please input an EG10118 instructor''s name: ')

# Space for clarity
print(' ')

# Let user know their story will now be displayed
print('Here''s your story!')

# Spece for clarity
print(' ')

# Create 4 different print statements using the inputed words
print('The engineering computing course is designed to be the',supAdj,'course you ever take.')
print('You will learn so many ' + pNoun + ', including basic concepts like ' + rNoun + '.')
print('With the tools that you learn, no problem will be too ' + adj + ' for you to figure out.')
print('By the end of the semester, you might even be better than',egInst,'at coding!')

"""Problem 2:<p>This program allows the user to input the name of an animal, an intital population, a growth rate, and a time. Then, the program computes the final population of that animal using the model for exponential growth and also displays the results to the user."""

# import math library
import math

# Ask user to input animal name
animal = input('Enter the name of the animal: ')
# Ask user to input initial population
P_0 = float(input('Enter the initial population (P_0): '))
# Ask user to input growth rate
r = float(input('Enter the growth rate: '))
# Ask user to input time
t = float(input('Enter the time: '))

# Space for clarity
print(' ')

# Perform calculations
P_f = (P_0)*(math.exp(r*t))

# Display final population to the user
print('Final Population of',animal,'-',math.floor(P_f)) # Rounded down because impossible to have a fraction of an individual

"""Problem 3:<p>This program asks the user to input an element number they would like (n), initializes the Fibonacci sequence, calculates the ith number of the Fibonacci sequence useing a for loop, and displays the results to the user."""

# Ask user to input the element number they would like (n)
n = int(input('Please enter an element number (n): ')) # Needs to be int if used for to be used as address for list

# Space for clarity
print(' ')

# Initialize the Fibonacci sequence as a list containing [0,1]
F = [0,1]

# Create for loop to find the final number of the Fibonacci sequence
for i in range(2,n):
    F.append(F[i-1]+F[i-2])

# Display the final value of the sequence to the user
print('Index',n,'of the Fibonacci sequence is',F[n-1],'.')

"""Problem 4:<p>This program utilizes a while loop and if statements to create a game in which the user gets to roll two dice with different combinations of numbers resulting in different outcomes."""

# import library for creating random numbers
import random

# Initialize die 1
dice1 = 0;
# Initialize die 2
dice2 = 0;

# Create a while loop that lasts as long as dice 1 and dice 2 are not snake eyes
while (dice1 != 1 or dice2 != 1):
    input('Roll the Dice!')
    dice1 = random.randint(1,6)
    dice2 = random.randint(1,6)
    print('Dice 1:',dice1)
    print('Dice 2:',dice2)
    sumDice = dice1 + dice2
    if sumDice == 7:
        print('You rolled lucky number 7!!')
print('Snake Eyes!!!')

# Space for clarity
print(' ')

# Notify user that the game is over
print('The game is over. Thanks for playing!')

"""Problem 5:<p>This program using lists and conditionals to create the game Battleship, which allows users to input coordinates for a 10x10 grid to either "hit" or "miss" a ship."""

# Create the battleship grid using a 2D list of coordinates

# Size of grid dimensions
gridSize = 10
# Create the grid
grid = [[0 for i in range(gridSize)] for j in range(gridSize)]

# Assign values of 1 for the location of the 3-block-long ship
grid[7][2] = 1
grid[7][3] = 1
grid[7][4] = 1

# Assign values of 1 for the location of the two 4-block-long ships
grid[1][1] = 1
grid[2][1] = 1
grid[3][1] = 1
grid[4][1] = 1
grid[1][5] = 1
grid[1][6] = 1
grid[1][7] = 1
grid[1][8] = 1

# Assign values of 1 for the location of the 5-block-long ship
grid[4][7] = 1
grid[5][7] = 1
grid[6][7] = 1
grid[7][7] = 1
grid[8][7] = 1

# Initialize row and column to be greater than 9
row = 10
col = 10
# Ask user to input row and col value, if it is not within acceptable range, asks again
while row > 9 or row < 0:
    row = int(input('Please input a row number (between 0 and 9): '))
while col > 9 or col < 0:
    col = int(input('Please input a col number (between 0 and 9): '))
if grid[row][col] == 1:
    print('Hit!')
else:
    print('Miss...')

"""Problem 6:<p>This program creates an entire game of battleship by keeping track of how many ships have been hit and once all are sunk, ending the game."""

# Copy/Paste Previous Code

# Size of grid dimensions
gridSize = 10
# Create the grid
grid = [[0 for i in range(gridSize)] for j in range(gridSize)]

# Assign values of 1 for the location of the 3-block-long ship
grid[7][2] = 1
grid[7][3] = 1
grid[7][4] = 1

# Assign values of 1 for the location of the two 4-block-long ships
grid[1][1] = 1
grid[2][1] = 1
grid[3][1] = 1
grid[4][1] = 1
grid[1][5] = 1
grid[1][6] = 1
grid[1][7] = 1
grid[1][8] = 1

# Assign values of 1 for the location of the 5-block-long ship
grid[4][7] = 1
grid[5][7] = 1
grid[6][7] = 1
grid[7][7] = 1
grid[8][7] = 1

# Find total number of 1's in the grid
totOne = 16
# Create while loop that runs as long as there is at least one "1" in the grid
while totOne >= 1:

    # Initialize row and column to be greater than 9
    row = 10
    col = 10
    # Ask user to input row and col value, if it is not within acceptable range, asks again
    # If the user hits the target, replace the one with an "X", and subtract the total 1's by one. If the user selects one they already hit, let them know
    # Include spaces for clarity
    while row > 9 or row < 0:
        row = int(input('Please input a row number (between 0 and 9): '))
    while col > 9 or col < 0:
        col = int(input('Please input a column number (between 0 and 9): '))
    if grid[row][col] == 1:
        print('Hit!')
        print(' ')
        grid[row][col] = 'X'
        totOne = totOne - 1
    elif grid[row][col] == 'X':
        print('You already hit here. Try another nearby coordinate.')
        print(' ')
    else:
        print('Miss...')
        print(' ')
    print('There are',totOne,'coordinates of ship locations left to hit.')
    print(' ')

# Congratulate the user 
print('Congratulations! You sunk the battleships. Game over.')

"""Problem 7:<p>This program uses a dictionary of star wars characters and their allegiance to the sith or jedi to be able to display the total number of jedi and list characters in alphabetical order."""

# Create dictionary of Star Wars characters
characters = {'Luke Skywalker':'Jedi',
              'Darth Vader':'Sith',
              'Yoda':'Jedi',
              'Obi-Wan Kenobi':'Jedi',
              'Emporor Palpatine':'Sith',
              'Darth Maul':'Sith',
              'Mace Windu':'Jedi'}

# Initialze jedi counter
counter = 0
# Use for loop to locate all jedi and sort them alphabetically
for character,allegiance in sorted(characters.items()):
    if allegiance == 'Jedi':
        print(character)
        counter = counter + 1

# Display total number of jedi found
print('There were',counter,'jedi found.')