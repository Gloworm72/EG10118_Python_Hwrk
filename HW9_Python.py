# -*- coding: utf-8 -*-
"""HW9_Congdon_Andrew.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12I7YLqNNPi-TY5EcjRKxZU2fHyavLRRy

HW #9<p>Andrew Congdon<p>4/27/2023

Problem 1:<p>This program defines 9 key-value pairs for each of the degree programs offered through the college of engineering at the University of Notre Dame. It will then ask the user to input a degree abbreviation and return its full name (if no key found, displays error).
"""

# Create dictionary of given keys and values
degrees = {'AERO':'Aerospace Engineering',
           'CE':'Civil Engineering',
           'CBE':'Chemical and Biochemical Engineering',
           'CS':'Computer Science',
           'CPEG':'Computer Engineering',
           'ES':'Earth Sciences',
           'ENV':'Environmental Engineering',
           'EE':'Electrical Engineering',
           'ME':'Mechanical Engineering'}

# Ask user to input an abbreviation (key)
userInput = input('Please enter an abbreviation for an engineering program: ')

# Use if statement to check if the chosen abbreviation is in the dictionary
if userInput in degrees.keys():
    # Space for clarity
    print(' ')
    print('The engineering degree program you chose is '+ str(degrees[userInput]) + '.')
else:
    # Space for clarity
    print(' ')
    print('Not in the dictionary of majors in the College of Engineering')

"""Problem 2:<p>This program creates two dictionaries of print time and masses for different valves. It will then find and display the number of valves considered. Then, it will create two new dictionaries that include the data that took less than 400 minutes to print and with a mass above 75 grams. Finally, it will display the number of valves in the filtered dictionary along with their respective print time and mass."""

# Create dictionary for print time
valve_print = {1:148,
               2:195,
               3:232,
               4:240,
               5:245,
               6:261,
               7:282,
               8:294,
               9:315,
               10:322,
               11:350,
               12:392,
               13:403,
               14:751}
# Create dictionary for mass
valve_mass = {1:25.9,
               2:35.3,
               3:66.16,
               4:70.15,
               5:62.1,
               6:77.9,
               7:65.2,
               8:76,
               9:74,
               10:135.32,
               11:102.9,
               12:214.8,
               13:118.4,
               14:216.1}

# Display to the user the number of valves considered
print('The total number of valves considered is',len(valve_print))

# Space for clarity
print(' ')

# Initialize new filtered print time dictionary
valve_filtered_print = {}
# Initialize new filtered mass dictionary
valve_filtered_mass = {}
# Create filtered dictionaries of print times less than 400 minutes and masses greater than 75 grams
for key,value in valve_print.items():
    if valve_print[key] < 400 and valve_mass[key] > 75:
        valve_filtered_print[key] = value
        valve_filtered_mass[key] = valve_mass[key]

# Space for clarity
print(' ')

# Display the number of valves in the filtered dictionary
print('There are',len(valve_filtered_print),'valves with a print time below 400 minutes and a mass over 75 grams.')

# Space for clarity
print(' ')

# Print information about each valve
for key,value in valve_filtered_print.items():
    print('Valve '+ str(key) + ': Print Time: ' + str(value) + ' minutes // Mass: ' + str(valve_filtered_mass[key]) + ' grams')

"""Problem 3:<p>This program estimates airline costs based on the number of passengers, ticket cost, number of beverage/snack packages, and other parameters."""

# User Defined Function

# This function takes the inputed values for number of travelers, ticket cost, 
# number of beverage packages, and number of pre-assigned seats, and calculates the total cost.
def tripCost(Travelers,TicketCost,BeveragePackages,PreAssignedSeats):
    '''This function takes the inputed values for number of travelers, ticket cost, number of beverage packages, and number of pre-assigned seats, and calculates the total cost.'''
    # Find total cost for tickets
    totalCost = numTrav*ticketCost
    # Take cost of beverage packages into account ($10 each)
    totalCost = totalCost + numBev*10
    # Take number of pre-assigned seats into account
    totalCost = totalCost + numPre*20
    return round(totalCost,2)

# Main Script

# Ask user to input the following values:

# Number of travelers
numTrav = int((input('Please input the number of travelers in your party: ')))
# Ticket cost (round to two decimal places)
ticketCost = round(float(input('Please input the ticket cost: $')),2)
# Number of beverage/drink packages
numBev = float(input('Please input the number of beverage/drink packages: '))
# Ask for the number of pre assigned seats and verify if that number is between zero and the number of travelers
# Initialize value
numPre = -1
while numPre < 0 or numPre > numTrav:
    numPre = int(input('Please input the number of pre-assigned seats: '))
    if numPre < 0 or numPre > numTrav:
        # Space for clarity
        print(' ')
        print('The number of preassigned seats must be between 0 and',numTrav)



# Space for clarity
print(' ')
# Display to user the total cost for the trup
print('The total cost for yout trip is $'+str(tripCost(numTrav,ticketCost,numBev,numPre)))

"""Problem 4:<p>This program filters open effectiveness ratios from the EG-10117 valve project. Then, it asks the user to choose a color for a scatter plot that is calculated and plotted with a user defined function."""

# Libraries that allow the use of linspace and plotting functions
import numpy
import matplotlib.pyplot

# User Defined Function
def effPlot(ratioList):
    '''Takes an inputed list of effectiveness ratios and plots the data based on user-inputed color preference.'''
    # Initialize filtered array
    filteredList = []
    # Create new array only with values between 0 and 1
    for i in range(len(ratioList)):
        if ratioList[i] >= 0 and ratioList[i] <= 1:
            filteredList.append(ratioList[i])
    # Space for clarity
    print(' ')
    # Display the number of filtered ratios
    print('There are',len(filteredList),'ratios between 0 and 1.')
    # Create x array to coorespond to the number of filtered data points
    xArray = numpy.linspace(1,len(filteredList),len(filteredList))
    # Ask user to input color preference for plot. Continue to ask until a valid value is inputed
    # Initialize color to allow while loop to run
    flag = True
    while flag:
        color = input('Would you like the data points in red, green, or blue markers: ')
        if color == 'red' or color == 'green' or color == 'blue':
            flag = False
        else:
            print(' ')
            print('The inputed color is not red, green, or blue. Please input a correct value.')
    # Create plot
    matplotlib.pyplot.plot(xArray,filteredList,'*',color = color)
    # Create title
    matplotlib.pyplot.title('Scatter Plot of Valve Effectiveness Ratios')
    # Create y-label
    matplotlib.pyplot.ylabel('Effectiveness Ratio')


# Main Script

# Creates original list, counts valves, and calls function
# Create an array of the repored effectiveness values
effValues = [0.56,0.78,-0.45,0.89,1.12,0.9,0.88,0.67,2.53,0.59,0.67,0.71]
# Display the number of ratios originally reported
print('The total number of effectiveness ratios originally reported was',len(effValues))
# Call the user defined function
effPlot(effValues)

"""Problem 5:<p>This program creates a scatter plot of valve mass vs. print time with blue points and showing a line of best fit."""

# Library that allows for plotting functions
import matplotlib.pyplot as plt

# Create valve print time list
printList = [148,195,232,240,245,261,282,294,315,322,350,392,403,751]
# Create valv mass list
massList = [25.9,35.3,66.16,70.15,62.1,77.9,65.2,76,74,135.32,102.9,214.8,118.4,216.1]

# Initialize line of best fit array
aveMassList = []
# Create list for line of best fit by using for loop
for i in range(len(printList)):
    aveMassList.append(0.343*printList[i]-12.7)

# Create scatter plot
plt.plot(printList,massList,'ob',label = 'Actual Valve Masses')
# Create line of best fit
plt.plot(printList,aveMassList,'r-',label = 'Line of Best Fit')
# Create title
plt.title('Cylindrical Valve Mass vs. Print Time')
# Create axis labels
plt.xlabel('Print Time (min)')
plt.ylabel('Mass (g)')
# Create legend
plt.legend(loc = 'best')

"""Problem 6:<p>This program creates a bar chart showing EG10118 student enrollments for each class section."""

# Library that allows for plotting functions
import matplotlib.pyplot as plt

# Create list for section numbers
sectionList = list(range(1,12))
# Create List for enrollment number
enrollList = [48,48,49,48,48,27,48,44,48,41,40]

# Create bar chart
plt.bar(sectionList,enrollList)
# Create title and axis labels
plt.title('EG10118 Student Enrollment for Sections 1-11')
plt.xlabel('Section Number')
plt.ylabel('Number of Students Enrolled')